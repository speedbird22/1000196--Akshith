# -*- coding: utf-8 -*-
"""Stylesavvyai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OqfDWflLaWAEW1kByUz5cBkY04-4aehM
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install google-generativeai

import google.generativeai as genai
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)
for m in genai.list_models():
	if 'generateContent' in m.supported_generation_methods:
  print(m.name)

import google.generativeai as genai
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro-latest')
response = model.generate_content("Please provide a list of the most influential people in the world.")
print(response.text)

for m in genai.list_models():
    if 'generateContent' in m.supported_generation_methods:
        print(m.name) # Corrected indentation: 4 spaces

import google.generativeai as genai

# Set API key for the Gemini 1.5 Pro Model
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Define function to generate fashion recommendations
def generate_fashion_recommendation(body_type, style_preference, occasion):
    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers "
              f"{style_preference} style for a {occasion}. Provide outfit details including "
              "clothing items, colors, and accessories suitable for this context.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Print the response
    print("Fashion Recommendation:")
    print(response.text)

# Example: Call function with user inputs
body_type = "athletic"
style_preference = "modern casual"
occasion = "weekend outing"
generate_fashion_recommendation(body_type, style_preference, occasion)

import google.generativeai as genai

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Greeting the user
print("Welcome to Your Personalized Fashion Recommender!")
print("Please provide some information to get tailored outfit suggestions.\n")

# Collect user inputs
body_type = input("Enter your body type (e.g., Slim, Athletic, Pear-shaped): ").strip()
style_preference = input("What is your preferred style? (e.g., modern casual, elegant formal): ").strip()
occasion = input("What occasion is this outfit for? (e.g., business meeting, weekend outing): ").strip()

# Generate fashion recommendation
def generate_fashion_recommendation(body_type, style_preference, occasion):
    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers "
              f"{style_preference} style for a {occasion}. Provide outfit details including "
              "clothing items, colors, and accessories suitable for this context.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Display the recommendation
    print("\nYour Fashion Recommendation:")
    print(response.text)

# Call the function with user inputs
generate_fashion_recommendation(body_type, style_preference, occasion)

import google.generativeai as genai

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Greeting the user
print("Welcome to Your Personalized Fashion Recommender!")
print("Please provide some information to get tailored outfit suggestions.\n")

# Collect user inputs
body_type = input("Enter your body type (e.g., Slim, Athletic, Pear-shaped): ").strip()
style_preference = input("What is your preferred style? (e.g., modern casual, elegant formal): ").strip()
occasion = input("What occasion is this outfit for? (e.g., business meeting, weekend outing): ").strip()

# Display humorous waiting message
print("\nPlease hold on as I consult the finest fashion minds in the digital realm to craft the perfect wardrobe recommendation tailored to your impeccable taste...\n")

# Generate fashion recommendation
def generate_fashion_recommendation(body_type, style_preference, occasion):
    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers "
              f"{style_preference} style for a {occasion}. Provide outfit details including "
              "clothing items, colors, and accessories suitable for this context.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Display the recommendation
    print("Your Fashion Recommendation:")
    print(response.text)

# Call the function with user inputs
generate_fashion_recommendation(body_type, style_preference, occasion)

import google.generativeai as genai

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Greeting the user
print("Welcome to Your Personalized Fashion Recommender!")
print("Please provide some information to get tailored outfit suggestions.\n")

# Collect user inputs
body_type = input("Enter your body type (e.g., Slim, Athletic, Pear-shaped) or leave blank to analyze from image : ").strip()
style_preference = input("What is your preferred style? (e.g., modern casual, elegant formal):").strip()
occasion = input("What occasion is this outfit for? (e.g., business meeting, weekend outing): ").strip()

# Image input placeholder
image_path = input("If you'd like me to analyze your style from an image, enter the image file path (e.g., 'example.jpg') or leave blank to skip: ").strip()

# Display humorous waiting message
print("\nPlease hold on as I consult the finest fashion minds in the digital realm to craft the perfect wardrobe recommendation tailored to your impeccable taste...\n")

# Placeholder for image analysis logic
def analyze_image(image_path):
    if image_path:
        print(f"Analyzing the image at '{image_path}' to determine body type and current fashion style...\n")
        # Placeholder for real image processing logic
        # This would be replaced by code to extract body type and fashion style
        # Assuming Gemini model API or similar service supports image uploads directly
        return "Athletic", "Modern trendy"
    return body_type  # Fallback to user-provided body type if no image

# Generate fashion recommendation
def generate_fashion_recommendation(body_type, style_preference, occasion):
    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers "
              f"{style_preference} style for a {occasion}. Provide outfit details including "
              "clothing items, colors, and accessories suitable for this context.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Display the recommendation
    print("Your Fashion Recommendation:")
    print(response.text)

# Use the image analysis function or fallback to user input
final_body_type = analyze_image(image_path)
generate_fashion_recommendation(final_body_type, style_preference, occasion)

import google.generativeai as genai

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Greeting the user
print("Welcome to Your Personalized Fashion Recommender!")
print("Please provide some information to get tailored outfit suggestions.\n")

# Collect user inputs
body_type = input("Enter your body type (e.g., Slim, Athletic, Pear-shaped) or leave blank to analyze from image: ").strip()
style_preference = input("What is your preferred style? (e.g., modern casual, elegant formal): ").strip()
occasion = input("What occasion is this outfit for? (e.g., business meeting, weekend outing): ").strip()
temperature = input("What is the temperature in your area? (Hot, Cold, or Room temperature): ").strip().lower()
color_preference = input("Do you have a color preference for your outfit? (e.g., neutral tones, bright colors, no preference): ").strip()
fit_preference = input("What fit do you prefer? (e.g., loose, tailored, slim fit): ").strip()
material_preference = input("Do you have a preferred material? (e.g., cotton, wool, synthetic, no preference): ").strip()
accessory_preference = input("Do you prefer minimal accessories, statement pieces, or no accessories at all?: ").strip()

# Image input placeholder
image_path = input("If you'd like me to analyze your style from an image, enter the image file path (e.g., 'example.jpg') or leave blank to skip: ").strip()

# Display humorous waiting message
print("\nPlease hold on as I consult the finest fashion minds in the digital realm to craft the perfect wardrobe recommendation tailored to your impeccable taste...\n")

# Placeholder for image analysis logic
def analyze_image(image_path):
    if image_path:
        print(f"Analyzing the image at '{image_path}' to determine body type and current fashion style...\n")
        # Placeholder for real image processing logic
        # This would be replaced by code to extract body type and fashion style
        # Assuming Gemini model API or similar service supports image uploads directly
        return "Athletic", "Modern trendy"
    return body_type  # Fallback to user-provided body type if no image

# Generate fashion recommendation
def generate_fashion_recommendation(body_type, style_preference, occasion, temperature, color_preference, fit_preference, material_preference, accessory_preference):
    # Modify the prompt based on temperature
    weather_suggestion = {
        "hot": "light, breathable fabrics like cotton or linen and minimal layering.",
        "cold": "warm, layered clothing with coats, sweaters, and scarves.",
        "room temperature": "comfortable outfits suitable for moderate weather."
    }
    weather_prompt = weather_suggestion.get(temperature, "appropriate for the given temperature.")

    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers {style_preference} style for a {occasion}. "
              f"The outfit should be {weather_prompt} Include clothing items, colors, and accessories suitable for this context. "
              f"The user prefers {color_preference} colors, {fit_preference} fit, {material_preference} materials, and {accessory_preference}.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Display the recommendation
    print("Your Fashion Recommendation:")
    print(response.text)

# Use the image analysis function or fallback to user input
final_body_type = analyze_image(image_path)
generate_fashion_recommendation(final_body_type, style_preference, occasion, temperature, color_preference, fit_preference, material_preference, accessory_preference)

import google.generativeai as genai

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDYzoCt1v6ixZ0N_i3VGiLAL1g0n3DPKJM"
genai.configure(api_key=GOOGLE_API_KEY)

# Greeting the user
print("Welcome to Your Personalized Fashion Recommender!")
print("Please provide some information to get tailored outfit suggestions.\n")

# Collect user inputs
body_type = input("Enter your body type (e.g., Slim, Athletic, Pear-shaped) or leave blank to analyze from image: ").strip()
style_preference = input("What is your preferred style? (e.g., modern casual, elegant formal): ").strip()
occasion = input("What occasion is this outfit for? (e.g., business meeting, weekend outing): ").strip()
temperature = input("What is the temperature in your area? (Hot, Cold, or Room temperature): ").strip().lower()
color_preference = input("Do you have a color preference for your outfit? (e.g., neutral tones, bright colors, no preference): ").strip()
fit_preference = input("What fit do you prefer? (e.g., loose, tailored, slim fit): ").strip()
material_preference = input("Do you have a preferred material? (e.g., cotton, wool, synthetic, no preference): ").strip()
accessory_preference = input("Do you prefer minimal accessories, statement pieces, or no accessories at all?: ").strip()

# Image input placeholder
image_path = input("If you'd like me to analyze your style from an image, enter the image file path (e.g., 'example.jpg') or leave blank to skip: ").strip()

# Display humorous waiting message
print("\nPlease hold on as I consult the finest fashion minds in the digital realm to craft the perfect wardrobe recommendation tailored to your impeccable taste...\n")

# Placeholder for image analysis logic
def analyze_image(image_path):
    if image_path:
        print(f"Analyzing the image at '{image_path}' to determine body type and current fashion style...\n")
        # Placeholder for real image processing logic
        # This would be replaced by code to extract body type and fashion style
        # Assuming Gemini model API or similar service supports image uploads directly
        return "Athletic", "Modern trendy"
    return body_type  # Fallback to user-provided body type if no image

# Generate fashion recommendation
def generate_fashion_recommendation(body_type, style_preference, occasion, temperature, color_preference, fit_preference, material_preference, accessory_preference):
    # Modify the prompt based on temperature
    weather_suggestion = {
        "hot": "light, breathable fabrics like cotton or linen and minimal layering.",
        "cold": "warm, layered clothing with coats, sweaters, and scarves.",
        "room temperature": "comfortable outfits suitable for moderate weather."
    }
    weather_prompt = weather_suggestion.get(temperature, "appropriate for the given temperature.")

    prompt = (f"Suggest an outfit for a user with a {body_type} body type who prefers {style_preference} style for a {occasion}. "
              f"The outfit should be {weather_prompt} Include clothing items, colors, and accessories suitable for this context. "
              f"The user prefers {color_preference} colors, {fit_preference} fit, {material_preference} materials, and {accessory_preference}.")

    # Generate content using Gemini API
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content(prompt)

    # Display the recommendation
    print("Your Fashion Recommendation:")
    print(response.text)

    # Follow-up questions
    adjustments = input("\nIs there anything you'd like to adjust or any specific preferences you'd like to add? (e.g., different color scheme, more casual, etc.): ").strip()
    if adjustments:
        print("\nTaking your adjustments into account...\n")
        adjusted_prompt = prompt + f" Please adjust the recommendation to incorporate the following preferences: {adjustments}."
        adjusted_response = model.generate_content(adjusted_prompt)
        print("Updated Fashion Recommendation:")
        print(adjusted_response.text)

# Use the image analysis function or fallback to user input
final_body_type = analyze_image(image_path)
generate_fashion_recommendation(final_body_type, style_preference, occasion, temperature, color_preference, fit_preference, material_preference, accessory_preference)